#!/usr/bin/env node

const path = require('path')
const glob = require('glob')
const argv = require('minimist')(process.argv.slice(2))
const fs = require('fs')
const util = require('util')
const toLineRows = require('./toLineRows')
const sortImports = require('./sortImports')
const sortComponentProps = require('./sortComponentProps')
const { Parser } = require('acorn')

const startTag = '<script>'
const endTag = '</script>'

const neat = (filePath, content) => {
  const ext = path.extname(filePath)

  let scriptStart = 0
  let scriptEnd = content.length
  let beforeJs = ''
  let afterJs = ''

  if (ext === '.vue') {
    scriptStart = content.indexOf(startTag) + startTag.length
    scriptEnd = content.indexOf(endTag)
    beforeJs = content.slice(0, scriptStart)
    afterJs = content.slice(scriptEnd)
  }
  const code = content.slice(scriptStart, scriptEnd)
  const res = Parser.parse(code, {
    ecmaVersion: 2020,
    sourceType: 'module'
  })
  const lineRows = toLineRows(res.body, code)
  const sortedRows = sortImports(lineRows)
  const nextSortedRows = sortComponentProps(sortedRows)

  const fileContent = beforeJs + nextSortedRows.map(row => row.line).join('') + afterJs
  fs.writeFileSync(filePath, fileContent, 'utf8')
}

const cwd = process.cwd()
const filePaths = argv._.map(pattern => {
  if (pattern.includes('*')) {
    return glob.sync(pattern)
      .map(p => path.resolve(cwd, p))
  }
  return path.resolve(cwd, pattern)
})
.flat()

filePaths.forEach(filePath => {
  const content = fs.readFileSync(filePath, 'utf8')
  neat(filePath, content)
})
